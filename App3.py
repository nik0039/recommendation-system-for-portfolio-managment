import streamlit as st
import pandas as pd
import plotly.graph_objs as go
import plotly.express as px
import xml.etree.ElementTree as ET
import requests
from datetime import date, timedelta
import apimoex
import utils
import random
from collections import defaultdict, Counter

# –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
st.set_page_config(layout="wide", page_title="Portfolio Dashboard", page_icon="üìà")
print("–ù–∞—á–∞–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞!", st.session_state)
# –í—ã–±–æ—Ä –¥–∞—Ç
today = date.today()
start_of_week = today - timedelta(days=today.weekday())
end_of_week = start_of_week + timedelta(days=6)
start_date = st.sidebar.date_input("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞", start_of_week)
end_date = st.sidebar.date_input("–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞", end_of_week)
start_date_str = start_date.strftime("%Y-%m-%d")
end_date_str = end_date.strftime("%Y-%m-%d")
start_date_str = '2024-04-01'
end_date_str = '2024-05-01'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
def show_full_chart(stock):
    st.session_state['show_full_chart'] = True
    st.session_state['full_chart_stock'] = stock


def equal_weights(df, investment=1000000):
    total_investment = investment  # 1 –º–∏–ª–ª–∏–æ–Ω –¥–æ–ª–ª–∞—Ä–æ–≤
    stock_prices = df.iloc[-1]
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
    num_stocks = 40

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞–∂–¥—É—é –∞–∫—Ü–∏—é
    equal_investment = total_investment / num_stocks

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    stock_quantities = {stock: equal_investment // price for stock, price in stock_prices.items()}

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
    df_stock_quantities = pd.DataFrame(list(stock_quantities.items()), columns=['Stock', 'Quantity'])
    return df_stock_quantities['Quantity'].values


def define_recomendation_category(data):
    stock_counts = defaultdict(list)

    for entry in data:
        for key, value in entry.items():
            if key == 'actions':
                for ticker, ticker_values in value.items():
                    stock_counts[ticker].append(ticker_values)

    # –®–∞–≥ 2: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å, –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    most_common_values = {}

    for ticker, counts in stock_counts.items():
        count_frequency = Counter(counts)
        most_common_value, frequency = count_frequency.most_common(1)[0]
        most_common_values[ticker] = most_common_value
    return most_common_values


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=3600)
def load_data(start_date, end_date):
    with requests.Session() as session:
        data = apimoex.get_index_tickers(session, 'MCXSM', '2023-12-29')
        df_tickers = pd.DataFrame(data)
        df_final = pd.DataFrame()
        for ticker in df_tickers['ticker']:
            if ticker in ['ELFV', 'GEMC']:
                continue
            data = apimoex.get_board_history(session, ticker, start=start_date, end=end_date)
            df = pd.DataFrame(data)
            df.set_index('TRADEDATE', inplace=True)
            df = df.rename(columns={"CLOSE": ticker})
            df_final = pd.concat([df_final, df[ticker]], axis=1)

        df_final.index = pd.to_datetime(df_final.index)
        security_info = []
        security_data = apimoex.get_board_securities(session)
        for ticker in df_tickers['ticker']:
            if security_data:
                result = next((item for item in security_data if item['SECID'] == ticker), None)
                security_info.append({
                    'Ticker': ticker,
                    'Name': result['SHORTNAME'],
                    # 'Sector': security_data[0]['SECTOR']
                })

        df_info = pd.DataFrame(security_info)
        url = f'https://iss.moex.com/iss/history/engines/stock/markets/index/boards/SNDX/securities/MESMTR.xml?from={start_date_str}&till={end_date_str}'
        response = requests.get(url)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            # –ü–∞—Ä—Å–∏–Ω–≥ XML
            root = ET.fromstring(response.content)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 'row'
            rows = root.findall('.//row')

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–æ–ª—è 'CLOSE'
            index_arr = [float(row.attrib['CLOSE']) for row in rows]
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            index_arr = []
        return df_final, df_info, index_arr


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ') or len(st.session_state) == 0:
    df_final, df_info, MCXSM_index = load_data(start_date_str, end_date_str)
    tickers = df_final.columns
    st.session_state['tickers'] = tickers
    predictions, prices = utils.get_dataframe(df_final)
    stocks_data = {}
    for ticker in tickers:
        stocks_data[ticker] = {'prices': prices[ticker].values, 'predicted': predictions[ticker].values,
                               'name': df_info[df_info.Ticker == ticker].Name.values[0],
                               'date_index': prices[ticker].index}
    st.session_state['stocks_data'] = stocks_data
    st.session_state['df_predicted'] = predictions
    st.session_state['df_final'] = df_final
    st.session_state['MCXSM_index'] = MCXSM_index

print(st.session_state)

if 'show_full_chart' not in st.session_state:
    st.session_state['show_full_chart'] = False
    st.session_state['full_chart_stock'] = None

if 'stocks_data' in st.session_state:
    tickers = st.session_state['tickers']
    stocks_data = st.session_state['stocks_data']
    print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å!")
# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
# data = {
#     'Date': pd.date_range(start='2023-01-01', periods=12, freq='ME'),
#     'Stock Price': list(range(100, len(MCXSM_index), 50)),
#     '–ò–Ω–¥–µ–∫—Å': MCXSM_index
# }
data = {
    'Date': pd.date_range(start='2023-01-01', periods=12, freq='M'),
    'Stock Price': [100, 200, 300, 250, 400, 500, 450, 550, 600, 700, 750, 800],
    'Index': [80, 150, 230, 180, 300, 450, 360, 440, 470, 520, 560, 610]
}
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
# portfolio_data = {
#     'Stock': ['TWTR', 'AAPL', 'XIACF', 'TSLA', 'GOOGL', 'AMZN'],
#     'Investment': [36600, 145180, 26600, 536600, 30000, 80000]
# }

sector_data = {
    'Stock': ['OGKB', 'MVID', 'MTLR', 'LSRG', 'GLTR', 'RNFT', 'SELG', 'CBOM', 'APTK', 'AFKS'],
    'Investment': [36600, 145180, 26600, 536600, 30000, 80000, 25000, 4100, 53000, 33050]
}

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
df = pd.DataFrame(data)
df['Portfolio Return'] = df['Stock Price'].pct_change().fillna(0)
df['Index Return'] = df['Index'].pct_change().fillna(0)
# –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
df['Cumulative Portfolio Return'] = (1 + df['Portfolio Return']).cumprod() - 1
df['Cumulative Index Return'] = (1 + df['Index Return']).cumprod() - 1
# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
df['Cumulative Portfolio Return Percent'] = df['Cumulative Portfolio Return'] * 100
df['Cumulative Index Return Percent'] = df['Cumulative Index Return'] * 100
# portfolio_df = pd.DataFrame(portfolio_data)
sector_df = pd.DataFrame(sector_data)

# –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
fig = go.Figure()
fig.add_trace(go.Scatter(x=df['Date'], y=df['Cumulative Portfolio Return Percent'], mode='lines+markers', name='–ü–æ—Ä—Ç—Ñ–µ–ª—å',
                         line=dict(color='orange'), fill='tozeroy', fillcolor='rgba(255, 165, 0, 0.2)'))
fig.add_trace(go.Scatter(x=df['Date'], y=df['Cumulative Index Return Percent'], mode='lines+markers', name='–ò–Ω–¥–µ–∫—Å MCXSM',
                         line=dict(dash='dash', color='white')))

fig.update_layout(
    title='–ì—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –∏–Ω–¥–µ–∫—Å–∞',
    xaxis=dict(title='–î–∞—Ç–∞'),
    yaxis=dict(title='–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'),
    yaxis_tickformat='%{n}',  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ Y –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    legend=dict(x=0.01, y=0.99)
)

# Streamlit layout
st.title("–î–∞—à–±–æ—Ä–¥ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"
if st.sidebar.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"):
    # random.shuffle(stock_cards)
    portfolio_test = equal_weights(st.session_state['df_final'])
    #portfolio_test = equal_weights(df_final)
    agent_results, predictions_value = utils.evaluate_agent(st.session_state['df_predicted'], portfolio_test, 0)
    #agent_results, predictions_value = utils.evaluate_agent(predictions, portfolio_test, 0)
    category_dict = define_recomendation_category(agent_results)
    recommended_category = {
        "–ü–æ–∫—É–ø–∞—Ç—å": [key for key, value in category_dict.items() if value == 1],
        "–ü—Ä–æ–¥–∞–≤–∞—Ç—å": [key for key, value in category_dict.items() if value == 2],
        "–î–µ—Ä–∂–∞—Ç—å": [key for key, value in category_dict.items() if value == 0]
    }
    recommended_stocks = {}
    # –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category, stocks in recommended_category.items():
        st.subheader(category)
        for stock in stocks:
            price_data = stocks_data[stock]['prices']
            predicted_data = stocks_data[stock]['predicted']
            name = stocks_data[stock]['name']
            recommended_stocks[stock] = category
            # –ü–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            full_fig = go.Figure()
            full_fig.add_trace(go.Scatter(
                x=list(range(len(price_data))),
                y=price_data,
                mode='lines+markers',
                line=dict(color='green' if price_data[-1] >= price_data[0] else 'red'),
                name='–¢–µ–∫—É—â–∏–π'
            ))
            full_fig.add_trace(go.Scatter(
                x=list(range(len(price_data), len(price_data) + len(predicted_data))),
                y=predicted_data,
                mode='lines+markers',
                line=dict(color='blue'),
                name='–ü—Ä–æ–≥–Ω–æ–∑'
            ))
            full_fig.update_layout(
                title=f'{name} –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫',
                xaxis=dict(title='Month'),
                yaxis=dict(title='Price'),
                template='plotly_dark'
            )
            st.plotly_chart(full_fig, use_container_width=True)
    st.session_state['recommended_stocks'] = recommended_stocks
# –í–∫–ª–∞–¥–∫–∞ "–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"
with st.sidebar.expander("–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", expanded=False):
    portfolio_input = {}
    for stock in tickers:
        portfolio_input[stock] = st.number_input(f'{stock} –∞–∫—Ü–∏–π', min_value=0, value=0)
        st.write(f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ‚ÇΩ {stocks_data[stock]["prices"][-1]}')
    st.session_state['portfolio'] = portfolio_input

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
new_portfolio_df = pd.DataFrame(list(portfolio_input.items()), columns=['Stock', 'Investment'])

# –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
pie_fig = px.pie(new_portfolio_df, values='Investment', names='Stock', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤', hole=0.3,
                 template='plotly_dark')
pie_fig.update_traces(textposition='inside', textinfo='percent+label', pull=[0.1, 0, 0, 0])

# –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
sector_pie_fig = px.pie(sector_df, values='Investment', names='Stock', title='–ü–æ—Ä—Ç—Ñ–µ–ª—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞', hole=0.3,
                        template='plotly_dark')
sector_pie_fig.update_traces(textposition='inside', textinfo='percent+label', pull=[0.1, 0, 0, 0])

# –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
col1, col2 = st.columns([3, 1])

with col1:
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.subheader("–ë–∞–ª–∞–Ω—Å")
    st.markdown("""
        <div style="background-color: #333; padding: 20px; border-radius: 10px; text-align: center;">
            <h1 style="color: white; font-size: 30px;">‚ÇΩ 8342,098</h1>
            <p style="color: white; font-size: 18px;">–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ</p>
            <p style="color: white; font-size: 22px;">‚ÇΩ 5360,600 </p>
            <p style="color: white; font-size: 18px;">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</p>
            <p style="color: green; font-size: 22px;">‚ÇΩ 2860,603 (+53%)</p>
            <p style="color: white; font-size: 18px;">–ö—ç—à</p>
            <p style="color: white; font-size: 22px;">‚ÇΩ 120,895 </p>
        </div>
    """, unsafe_allow_html=True)

col3, col4 = st.columns([1, 1])

with col3:
    st.plotly_chart(pie_fig, use_container_width=True)

with col4:
    st.plotly_chart(sector_pie_fig, use_container_width=True)

# –ö–∞—Ä—Ç–æ—á–∫–∏ –∞–∫—Ü–∏–π —Å –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
st.subheader("–ê–∫—Ü–∏–∏")
stock_cards = list(stocks_data.keys())
num_cards = len(stock_cards)
cols = st.columns(3)

for i in range(num_cards):
    with cols[i % 3]:
        stock = stock_cards[i]
        price_data = stocks_data[stock]['prices']
        predicted_data = stocks_data[stock]['predicted']
        name = stocks_data[stock]['name']

        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        change_percent = ((price_data[-1] - price_data[-2]) / price_data[-2]) * 100
        color = 'green' if change_percent >= 0 else 'red'

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∞
        mini_fig = go.Figure()
        mini_fig.add_trace(go.Scatter(
            x=list(range(len(price_data))),
            y=price_data,
            mode='lines',
            line=dict(color=color),
            fill='tozeroy',
            fillcolor=f'rgba(0, 255, 0, 0.2)' if color == 'green' else f'rgba(255, 0, 0, 0.2)'
        ))
        mini_fig.update_layout(
            margin=dict(l=0, r=0, t=30, b=0),
            height=150,
            xaxis=dict(visible=False),
            yaxis=dict(range=[min(price_data), max(price_data)]),
            showlegend=False
        )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        if 'recommended_stocks' in st.session_state:
            recommended_stocks = st.session_state['recommended_stocks']
            st.write(f"**{stock} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommended_stocks[stock]}**")
        else:
            st.write(f"**{stock}**")
        st.plotly_chart(mini_fig, use_container_width=True)
        st.write(f"**{name}  {change_percent:.1f}%**")
        # st.write(f"**{change_percent:.1f}%**")
        st.button(f'–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ {stock}', key=f'button_{stock}', on_click=show_full_chart, args=(stock,))

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
if st.session_state['show_full_chart']:
    stock = st.session_state['full_chart_stock']
    price_data = stocks_data[stock]['prices']
    predicted_data = stocks_data[stock]['predicted']
    print(predicted_data)
    name = stocks_data[stock]['name']
    date_index = stocks_data[stock]['date_index']
    full_fig = go.Figure()
    full_fig.add_trace(go.Scatter(
        x=list(range(1, len(price_data) + 1)),
        y=price_data,
        mode='lines+markers',
        line=dict(color='green' if price_data[-1] >= price_data[0] else 'red'),
        name='–ê–∫—Ç—É–∞–ª—å–Ω—ã–π'
    ))
    full_fig.add_trace(go.Scatter(
        x=list(range(len(price_data) + 1, len(price_data) + len(predicted_data) + 1)),
        y=predicted_data,
        mode='lines+markers',
        line=dict(color='blue'),
        name='–ü—Ä–æ–≥–Ω–æ–∑'
    ))
    full_fig.update_layout(
        title=f'{name} –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫',
        xaxis=dict(title='–î–µ–Ω—å',
                   tickvals=list(range(1, len(price_data) + len(predicted_data) + 1)),
                   ticktext=[str(i) for i in range(1, len(price_data) + len(predicted_data) + 1)]
                   ),
        yaxis=dict(title='–¶–µ–Ω–∞'),
        template='plotly_dark'
    )
    st.plotly_chart(full_fig, use_container_width=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
if start_date != st.session_state.get("start_date", start_of_week) or end_date != st.session_state.get("end_date",
                                                                                                       end_of_week):
    st.session_state["start_date"] = start_date
    st.session_state["end_date"] = end_date
    st.experimental_rerun()
